{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Curso POO com Java","text":"<p>Bem-vindo ao curso de Programa\u00e7\u00e3o Orientada a Objetos com Java!</p> <p>Neste curso voc\u00ea aprender\u00e1 desde os conceitos b\u00e1sicos at\u00e9 t\u00f3picos mais avan\u00e7ados sobre POO.</p> <p>Clique nos m\u00f3dulos ao lado para come\u00e7ar!</p>"},{"location":"modulo2/abstracao/","title":"Abstra\u00e7\u00e3o em Java","text":""},{"location":"modulo2/abstracao/#o-que-e-abstracao","title":"\ud83d\udccc O que \u00e9 Abstra\u00e7\u00e3o?","text":"<p>Abstra\u00e7\u00e3o \u00e9 um dos pilares da Programa\u00e7\u00e3o Orientada a Objetos (POO) e tem como objetivo esconder os detalhes de implementa\u00e7\u00e3o e expor apenas as funcionalidades essenciais de um objeto.</p> <p>Assim como usamos um carro sem conhecer todos os detalhes do seu motor, na programa\u00e7\u00e3o usamos a abstra\u00e7\u00e3o para trabalhar com objetos sem nos preocupar com como exatamente eles fazem o que fazem.</p>"},{"location":"modulo2/abstracao/#beneficios-da-abstracao","title":"\ud83c\udfaf Benef\u00edcios da Abstra\u00e7\u00e3o","text":"<ul> <li>Facilita a manuten\u00e7\u00e3o do c\u00f3digo.</li> <li>Aumenta a reutiliza\u00e7\u00e3o de c\u00f3digo.</li> <li>Reduz o acoplamento entre as classes.</li> <li>Melhora a legibilidade e a organiza\u00e7\u00e3o.</li> </ul>"},{"location":"modulo2/abstracao/#como-aplicar-abstracao-em-java","title":"\ud83d\udd27 Como aplicar Abstra\u00e7\u00e3o em Java?","text":"<p>Em Java, usamos principalmente:</p> <ul> <li>Classes abstratas</li> <li>Interfaces</li> </ul>"},{"location":"modulo2/abstracao/#classes-abstratas","title":"\ud83e\uddf1 Classes Abstratas","text":"<p>Uma classe abstrata \u00e9 aquela que n\u00e3o pode ser instanciada diretamente e pode conter m\u00e9todos abstratos (sem corpo) e m\u00e9todos concretos (com implementa\u00e7\u00e3o).</p>"},{"location":"modulo2/abstracao/#sintaxe","title":"Sintaxe:","text":"<pre><code>abstract class Animal {\n    abstract void emitirSom(); // m\u00e9todo abstrato\n\n    void dormir() {\n        System.out.println(\"Dormindo...\");\n    }\n}\n</code></pre> <p>Uma subclasse deve implementar os m\u00e9todos abstratos da superclasse:</p> <pre><code>class Cachorro extends Animal {\n    @Override\n    void emitirSom() {\n        System.out.println(\"Latindo...\");\n    }\n}\n</code></pre>"},{"location":"modulo2/abstracao/#interfaces","title":"\ud83e\udde9 Interfaces","text":"<p>Uma interface define um contrato que uma classe deve seguir. Todos os m\u00e9todos de uma interface s\u00e3o abstratos por padr\u00e3o (em vers\u00f5es antigas do Java).</p>"},{"location":"modulo2/abstracao/#sintaxe_1","title":"Sintaxe:","text":"<pre><code>interface Controlavel {\n    void ligar();\n    void desligar();\n}\n</code></pre> <p>Implementa\u00e7\u00e3o em uma classe:</p> <pre><code>class Computador implements Controlavel {\n    public void ligar() {\n        System.out.println(\"Computador ligado\");\n    }\n\n    public void desligar() {\n        System.out.println(\"Computador desligado\");\n    }\n}\n</code></pre>"},{"location":"modulo2/abstracao/#quando-usar-cada-um","title":"\ud83e\udd14 Quando usar cada um?","text":"Recurso Quando usar Classe Abstrata Quando h\u00e1 uma rela\u00e7\u00e3o hier\u00e1rquica clara e algum comportamento comum Interface Quando se deseja garantir um contrato sem se preocupar com heran\u00e7a"},{"location":"modulo2/abstracao/#exemplo-pratico","title":"\ud83e\udde0 Exemplo Pr\u00e1tico","text":"<p>Imagine um sistema banc\u00e1rio. Podemos abstrair uma conta banc\u00e1ria como:</p> <pre><code>abstract class Conta {\n    String numero;\n    double saldo;\n\n    void depositar(double valor) {\n        saldo += valor;\n    }\n\n    abstract void sacar(double valor);\n}\n</code></pre> <p>Cada tipo de conta (poupan\u00e7a, corrente) implementa o saque de maneira diferente:</p> <pre><code>class ContaCorrente extends Conta {\n    @Override\n    void sacar(double valor) {\n        saldo -= valor + 0.10; // tarifa\n    }\n}\n</code></pre>"},{"location":"modulo2/abstracao/#conclusao","title":"\u2705 Conclus\u00e3o","text":"<ul> <li>Abstra\u00e7\u00e3o permite focar no que o objeto faz e n\u00e3o em como ele faz.</li> <li>Use classes abstratas quando h\u00e1 c\u00f3digo comum entre subclasses.</li> <li>Use interfaces para definir contratos que m\u00faltiplas classes podem implementar, mesmo que n\u00e3o estejam relacionadas.</li> </ul> <p>\ud83d\udd19 Voltar ao Sum\u00e1rio</p>"},{"location":"modulo2/exercicios_abstracao/","title":"\ud83e\uddea Exerc\u00edcios Pr\u00e1ticos - Abstra\u00e7\u00e3o em Java","text":""},{"location":"modulo2/exercicios_abstracao/#cenario","title":"\ud83d\udcd8 Cen\u00e1rio","text":"<p>Voc\u00ea foi contratado para desenvolver uma aplica\u00e7\u00e3o simples de gerenciamento de ve\u00edculos. O sistema deve permitir representar diferentes tipos de ve\u00edculos e suas formas de ligar e abastecer. Para isso, voc\u00ea dever\u00e1 aplicar abstra\u00e7\u00e3o utilizando classes abstratas e interfaces.</p>"},{"location":"modulo2/exercicios_abstracao/#exemplo-de-estrutura-inicial","title":"\ud83d\udd28 Exemplo de Estrutura Inicial","text":"<pre><code>abstract class Veiculo {\n    String modelo;\n    int ano;\n\n    Veiculo(String modelo, int ano) {\n        this.modelo = modelo;\n        this.ano = ano;\n    }\n\n    abstract void ligar();\n\n    void exibirInfo() {\n        System.out.println(modelo + \" - \" + ano);\n    }\n}\n</code></pre> <p>Crie as seguintes classes concretas:</p> <pre><code>class Carro extends Veiculo {\n    Carro(String modelo, int ano) {\n        super(modelo, ano);\n    }\n\n    @Override\n    void ligar() {\n        System.out.println(\"Carro ligado com chave.\");\n    }\n}\n\nclass Moto extends Veiculo {\n    Moto(String modelo, int ano) {\n        super(modelo, ano);\n    }\n\n    @Override\n    void ligar() {\n        System.out.println(\"Moto ligada com bot\u00e3o.\");\n    }\n}\n</code></pre>"},{"location":"modulo2/exercicios_abstracao/#interface-abastecivel","title":"\ud83e\udde9 Interface Abastecivel","text":"<p>Crie uma interface chamada <code>Abastecivel</code> com os m\u00e9todos:</p> <pre><code>interface Abastecivel {\n    void abastecerGasolina();\n    void abastecerAlcool();\n}\n</code></pre> <p>Implemente essa interface nas classes <code>Carro</code> e <code>Moto</code>.</p>"},{"location":"modulo2/exercicios_abstracao/#desafios","title":"\ud83e\udde0 Desafios","text":"<ol> <li>Crie uma classe <code>Garagem</code> que receba uma lista de ve\u00edculos e os ligue automaticamente.</li> <li>Adicione um m\u00e9todo na interface que permita verificar o tipo de combust\u00edvel atual do ve\u00edculo.</li> <li>Implemente uma nova classe <code>Caminhao</code> com comportamento diferente ao ligar e abastecer.</li> </ol>"},{"location":"modulo2/exercicios_abstracao/#objetivo","title":"\u2705 Objetivo","text":"<p>Esses exerc\u00edcios ajudam a refor\u00e7ar os conceitos de: - Classes abstratas e m\u00e9todos abstratos. - Interfaces e implementa\u00e7\u00e3o de contratos. - Polimorfismo e reutiliza\u00e7\u00e3o de c\u00f3digo.</p>"}]}